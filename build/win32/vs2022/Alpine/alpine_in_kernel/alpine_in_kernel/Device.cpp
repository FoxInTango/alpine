/*++

Module Name:

    device.c - Device handling events for example driver.

Abstract:

   This file contains the device entry points and callbacks.
    
Environment:

    Kernel-mode Driver Framework

--*/
/** https://www.cnblogs.com/iBinary/p/15779751.html 
 */
#include <ntifs.h>
#include <ntddk.h>
#include <Ntstrsafe.h>
#include <ntimage.h>
#include <wdm.h>

ULONG POOLTAG = 'POOL';
#include <libcpp/libcpp.h>

using namespace foxintango;

/*
EXTERN_C_BEGIN
void* __cdecl operator new(size_t Size, POOL_TYPE PoolType)
{
    PAGED_CODE();
    Size = (Size != 0) ? Size : 1;
    void* pObject = ExAllocatePoolWithTag(PoolType, Size, POOLTAG);
#if DBG
    if (pObject != NULL)
    {
        RtlFillMemory(pObject, Size, 0xCC);
    }
#endif // DBG
    return pObject;
}
void* __cdecl operator new[](size_t Size, POOL_TYPE PoolType)
    {
        PAGED_CODE();
        Size = (Size != 0) ? Size : 1;
        void* pObject = ExAllocatePoolWithTag(PoolType, Size, POOLTAG);
#if DBG
        if (pObject != NULL)
        {
            RtlFillMemory(pObject, Size, 0xCC);
        }
#endif // DBG
        return pObject;
    }
    
    void  operator delete(void* pObject)
    {
        PAGED_CODE();
        if (pObject != NULL)
        {
            ExFreePoolWithTag(pObject, POOLTAG);
        }
    }
    
    void __cdecl operator delete(void* pObject,unsigned __int64 size)
    {
        PAGED_CODE();
        if (pObject != NULL)
        {
            ExFreePoolWithTag(pObject, POOLTAG);
        }
    }
    
    void  operator delete[](void* pObject)
        {
            PAGED_CODE();
            if (pObject != NULL)
            {
                ExFreePoolWithTag(pObject, POOLTAG);
            }
        }
        
EXTERN_C_END 
*/
// https://github.com/veltzer/kcpp/blob/master/cpp_support.cc
void* operator new(size_t x) {
    return 0;
}

void* operator new[](size_t x) {
    return 0;
}

void operator delete   (void* pointer) {

}

void operator delete[] (void* pointer) {

}

void operator delete   (void* pointer, const long unsigned int type) {
    
}
void operator delete   (void* pointer, const unsigned _int64 type) {

}
void operator delete [](void* pointer, const unsigned _int64 type) {

}
#include "driver.h"
#include "device.tmh"

#ifdef ALLOC_PRAGMA
#pragma alloc_text (PAGE, alpineinkernelCreateDevice)
#endif

NTSTATUS
alpineinkernelCreateDevice(
    _Inout_ PWDFDEVICE_INIT DeviceInit
    )
/*++

Routine Description:

    Worker routine called to create a device and its software resources.

Arguments:

    DeviceInit - Pointer to an opaque init structure. Memory for this
                    structure will be freed by the framework when the WdfDeviceCreate
                    succeeds. So don't access the structure after that point.

Return Value:

    NTSTATUS

--*/
{
    WDF_OBJECT_ATTRIBUTES deviceAttributes;
    PDEVICE_CONTEXT deviceContext;
    WDFDEVICE device;
    NTSTATUS status;

    string_compare<char>(0,0,0);

    Array<int> array;

    PAGED_CODE();

    WDF_OBJECT_ATTRIBUTES_INIT_CONTEXT_TYPE(&deviceAttributes, DEVICE_CONTEXT);

    status = WdfDeviceCreate(&DeviceInit, &deviceAttributes, &device);

    if (NT_SUCCESS(status)) {
        //
        // Get a pointer to the device context structure that we just associated
        // with the device object. We define this structure in the device.h
        // header file. DeviceGetContext is an inline function generated by
        // using the WDF_DECLARE_CONTEXT_TYPE_WITH_NAME macro in device.h.
        // This function will do the type checking and return the device context.
        // If you pass a wrong object handle it will return NULL and assert if
        // run under framework verifier mode.
        //
        deviceContext = DeviceGetContext(device);

        //
        // Initialize the context.
        //
        deviceContext->PrivateDeviceData = 0;

        //
        // Create a device interface so that applications can find and talk
        // to us.
        //
        status = WdfDeviceCreateDeviceInterface(
            device,
            &GUID_DEVINTERFACE_alpineinkernel,
            NULL // ReferenceString
            );

        if (NT_SUCCESS(status)) {
            //
            // Initialize the I/O Package and any Queues
            //
            status = alpineinkernelQueueInitialize(device);
        }
    }

    return status;
}
